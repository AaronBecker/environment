#!/usr/bin/python
#This code is licensed under the GPL, version 3.
#A full copy of the license can be obtained by contacting the author 
#at the following email adress: joel.schaerer@laposte.net
from __future__ import division
import cPickle
import getopt
from sys import argv,exit
import os
import signal
max_keyweight=1000

def signal_handler(arg1,arg2):
    print "Received SIGINT, trying to continue"
signal.signal(signal.SIGINT,signal_handler) #Don't break on sigint

def uniqadd(list,key):
    if key not in list:
        list.append(key)

def dicadd(dic,key,increment=1):
    dic[key]=dic.get(key,0.)+increment

def match(path,pattern,path_dict,re_flags=0):
    import re
    if os.path.realpath(os.curdir)==path : return False
    if re.search(pattern,"/".join(path.split('/')[-1-pattern.count('/'):]),re_flags) is None:
        return False
    else: 
        if os.path.exists(path) : return True
        else: #clean up dead directories
            del path_dict[path]
            return False

def save(path_dict,dic_file):
    cPickle.dump(path_dict,open(dic_file+".tmp",'w'),-1)
    import shutil
    shutil.copy(dic_file+".tmp",dic_file) #cPickle.dump doesn't seem to be atomic, so this is more secure

def forget(path_dict,dic_file):
    """Gradually forget about directories. Only call from the actual jump since it can take time"""
    keyweight=sum(path_dict.values()) #Gradually forget about old directories
    if keyweight>max_keyweight: 
        for k in path_dict.keys():
            path_dict[k]*=0.9*max_keyweight/keyweight
    save(path_dict,dic_file)

def find_matches(dirs,pattern,path_dict,result_list,re_flags):
    for path,count in dirs:
        if match(path,pattern,path_dict,re_flags):
            uniqadd(result_list,path)

#Main code
try:
    optlist, args = getopt.getopt(argv[1:], 'a',['stat','import','completion']) 
except getopt.GetoptError, e:
    print "Unknown command line argument: %s" % e
    exit(1)

dic_file=os.path.expanduser("~/.autojump_py")
try:
    aj_file=open(dic_file)
    path_dict=cPickle.load(aj_file)
    aj_file.close()
except IOError:
    path_dict={}

if ('-a','') in optlist:
    dicadd(path_dict,args[-1])
    save(path_dict,dic_file)
elif ('--stat','') in optlist:
    a=path_dict.items()
    a.sort(key=lambda e:e[1])
    for path,count in a[-100:]:
        print "%.1f:\t%s" % (count,path)
    print "Total key weight: %d" % sum(path_dict.values())
elif ('--import','') in optlist:
    for i in open(args[-1]).readlines():
        dicadd(path_dict,i[:-1])
    cPickle.dump(path_dict,open(dic_file,'w'),-1)
else:
    import re
    completion=False
    userchoice=-1 #3 if the pattern is of the form __pattern__3, otherwise -1
    results=[]
    if ('--completion','') in optlist:
        completion=True
    else:
        forget(path_dict,dic_file) #gradually forget about old directories
    if not args: pattern=""
    else: pattern=args[-1]

    if len(pattern)>0 and pattern[0]=="/": #if pattern is a full path, jump there
        if not completion : print pattern
    else:
        endmatch=re.search("__([0-9]+)",pattern)
        if endmatch:
            userchoice=int(endmatch.group(1))
            pattern=re.sub("__[0-9]+.*","",pattern)
        else:
            endmatch=re.match("(.*)__",pattern)
            if endmatch: pattern=endmatch.group(1)

        dirs=path_dict.items()
        dirs.sort(key=lambda e:e[1],reverse=True)
        find_matches(dirs,pattern,path_dict,results,re_flags=0)
        dirs=path_dict.items() #we need to recreate the list since the first iteration potentially deletes paths
        dirs.sort(key=lambda e:e[1],reverse=True)
        if completion or not results: #if not found, try ignoring case. On completion always show all results
            find_matches(dirs,pattern,path_dict,results,re_flags=re.IGNORECASE) 

        if userchoice!=-1:
            if len(results) > userchoice-1 : print results[userchoice-1]
        elif len(results) > 1 and completion:
            print "\n".join(("%s__%d__%s" % (pattern,n+1,r) for n,r in enumerate(results[:8])))
        else: 
            if results : print results[0]
